import streamlit as st
import pandas as pd
import codecs
import json
from datetime import date


st.set_page_config(page_title="–ü–æ–∏—Å–∫ –∞–≤–∏–∞–±–∏–ª–µ—Ç–æ–≤", page_icon=":airplane:", layout="wide")

# –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å
username = st.sidebar.text_input("–õ–æ–≥–∏–Ω")
password = st.sidebar.text_input("–ü–∞—Ä–æ–ª—å", type="password")

# –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
if st.sidebar.checkbox("–í–æ–π—Ç–∏"):
    if username == "admin" and password == "12345":
        st.success("–£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è")
    else:
        st.error("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å")

def load_css(file_name:str)->None:
    with open(file_name) as f:
        st.markdown(f'<style>{f.read()}</style>', unsafe_allow_html=True)

load_css("styles.css")

# –ß—Ç–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ HTML-—Ñ–∞–π–ª–∞
with open("header.html") as f:
    header_html = f.read()

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å –ø–æ–º–æ—â—å—é st.markdown()
st.markdown(header_html, unsafe_allow_html=True)


# –§–æ—Ä–º–∞ –ø–æ–∏—Å–∫–∞ –±–∏–ª–µ—Ç–æ–≤
with st.form(key='flight_search_form'):
    col1, col2, col3, col4 = st.columns([1, 1, 1, 1])

    departure = col1.text_input("–ì–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
    arrival = col2.text_input("–ì–æ—Ä–æ–¥ –ø—Ä–∏–±—ã—Ç–∏—è:")
    departure_date = col3.date_input("–î–∞—Ç–∞ –≤—ã–ª–µ—Ç–∞:", date.today())
    arrival_date = col4.date_input("–î–∞—Ç–∞ –ø—Ä–∏–ª–µ—Ç–∞:", date.today())

    col5, col6 = st.columns([1, 1])
    class_type = col5.selectbox("–ö–ª–∞—Å—Å:", ("–≠–∫–æ–Ω–æ–º", "–ë–∏–∑–Ω–µ—Å", "–ü–µ—Ä–≤—ã–π"))
    passengers = col6.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤:", min_value=1, max_value=10, value=1)

    search_button = st.form_submit_button(label="–ù–∞–π—Ç–∏ –±–∏–ª–µ—Ç—ã üîç")

# –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
if search_button:

    sort_by = st.selectbox('–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ', ['–¶–µ–Ω–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é', '–¶–µ–Ω–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é', '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é', '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ —É–±—ã–≤–∞–Ω–∏—é'])

    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = {
        'departure': departure,
        'arrival': arrival,
        'departure_date': str(departure_date),
        'arrival_date': str(arrival_date),
        'class_type': class_type,
        'passengers': passengers
    }

    # –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–æ–≤–∞—Ä—è –≤ —Ñ–æ—Ä–º–∞—Ç JSON
    json_data = json.dumps(user_data, ensure_ascii=False)

    # –ó–∞–ø–∏—Å—å JSON-–¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª –≤ —á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    with codecs.open('user_data.json', 'w', encoding='utf8') as f:
        f.write(json_data)


    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    data = pd.read_csv('train_data.csv')

    # –£–¥–∞–ª–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞
    data = data.drop(data.columns[0], axis=1)

    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤
    data = data.rename(columns={
        'airline': '–ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è',
        'flight': '–†–µ–π—Å',
        'source_city': '–ì–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è',
        'departure_time': '–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è',
        'stops': '–ü–µ—Ä–µ—Å–∞–¥–∫–∏',
        'arrival_time': '–í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è',
        'destination_city': '–ì–æ—Ä–æ–¥ –ø—Ä–∏–±—ã—Ç–∏—è',
        'class': '–ö–ª–∞—Å—Å',
        'duration': '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, —á',
        'days_left': '–î–Ω–µ–π –¥–æ –≤—ã–ª–µ—Ç–∞',
        'price': '–¶–µ–Ω–∞, —Ä—É–±'
    })

     # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –¥–Ω—è –≤ —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
    def convert_time(time):
        if time == 'Night':
            return '01:10'
        elif time == 'Evening':
            return '20:15'
        elif time == 'Morning':
            return '07:35'
        elif time == 'Afternoon':
            return '13:05'
        else:
            return time

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–±—ã—Ç–∏—è
    data['–í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è'] = data['–í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è'].apply(convert_time)

    if sort_by == '–¶–µ–Ω–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é':
        data_sorted = data.sort_values(by=['–¶–µ–Ω–∞, —Ä—É–±'], ascending=True)
    elif sort_by == '–¶–µ–Ω–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é':
        data_sorted = data.sort_values(by=['–¶–µ–Ω–∞, —Ä—É–±'], ascending=False)
    elif sort_by == '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é':
        data_sorted = data.sort_values(by=['–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, —á'], ascending=True)
    elif sort_by == '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ —É–±—ã–≤–∞–Ω–∏—é':
        data_sorted = data.sort_values(by=['–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, —á'], ascending=False)
    else:
        data_sorted = data

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML-–∫–æ–¥–∞ —Ç–∞–±–ª–∏—Ü—ã —Å –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    html_table_sorted = data_sorted.to_html(index=False, classes=["styled-table"])

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å –ø–æ–º–æ—â—å—é st.write
    st.write(html_table_sorted, unsafe_allow_html=True)



    